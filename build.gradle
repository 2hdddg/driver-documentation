import org.ajoberstar.grgit.*
import org.asciidoctor.groovydsl.AsciidoctorExtensions
import org.asciidoctor.Asciidoctor
import org.asciidoctor.OptionsBuilder
import org.asciidoctor.SafeMode
import de.undercouch.gradle.tasks.download.Download

buildscript {
    ext {
        jrubyVersion = '1.7.24'
        asciidoctorjVersion = '1.5.4'
        asciidoctorjPdfVersion = '1.5.0-alpha.11'
        asciidoctorGroovyDslVersion = '1.0.0.Alpha1'
        gradleGitVersion = '1.4.1'
    }

    dependencies {
        classpath "org.asciidoctor:asciidoctorj:$asciidoctorjVersion"
        classpath "org.asciidoctor:asciidoctorj-pdf:$asciidoctorjPdfVersion"
        classpath "org.asciidoctor:asciidoctorj-groovy-dsl:$asciidoctorGroovyDslVersion"
        classpath "org.ajoberstar:gradle-git:$gradleGitVersion"
        classpath "org.jruby:jruby-complete:$jrubyVersion"
    }

    repositories {
        jcenter()
    }
}

plugins {
    id "de.undercouch.download" version "2.1.0"
}

apply plugin: 'base'

defaultTasks 'asciidoctorHtml', 'asciidoctorPdf'

ext {
    projectVersionTitle = '1.0 ALPHA'
    projectVersion = '1.0'
    driverLanguages = [
            'dotnet': [
                    'name'   : 'C#',
                    'version': '1.0.0-RC2',
                    'gitref' : '1.0',
                    'url'    : 'https://www.nuget.org/packages/Neo4j.Driver'
            ],
            'java': [
                    'name'   : 'Java',
                    'version': '1.0.0-RC2',
                    'gitref' : '1.0',
                    'url'    : 'http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.neo4j.driver%22%20AND%20a%3A%22neo4j-java-driver%22'
            ],
            'javascript': [
                    'name'   : 'JavaScript',
                    'version': '1.0.0-RC2',
                    'gitref' : '1.0',
                    'url'    : 'https://www.npmjs.com/package/neo4j-driver'
            ],
            'python'    : [
                    'name'   : 'Python',
                    'version': '1.0.0rc2',
                    'gitref' : '1.0',
                    'url'    : 'https://pypi.python.org/pypi/neo4j-driver'
            ]
    ]
    commonAsciidoctorAttributes = [
            'project-version'  : projectVersionTitle,
            'icons'            : 'font',
            'imagesdir'        : './images',
            'attribute-missing': 'warn'
    ]
    htmlAsciidoctorAttributes = [
            'toc'        : 'left',
            'stylesdir'  : 'css',
            'stylesheet' : 'github.css',
            'sectanchors': '',
            'docinfo1'   : '',
            'linkcss'    : ''
    ]
    pdfAsciidoctorAttributes = [
            'source-highlighter': 'rouge',
            'pdf-stylesdir'     : "${projectDir}/src/main/pdf-theme".toString(),
            'pdf-style'         : 'neo',
            'pdf-fontsdir'      : "$buildDir/fonts".toString(),
            'doctype'           : 'book',
            'toc'               : '',
            'showlinks'         : ''
    ]
    adoc = null
}

task('prepareDriverSources') {
    description 'Clones the driver sources from GitHub or uses local checkouts.'
    outputs.dir file("$buildDir/driver-sources")
    outputs.upToDateWhen {
        project.hasProperty('localDriverSources') || file("$buildDir/driver-sources").exists()
    }
    doLast {
        if (!project.hasProperty('localDriverSources')) {
            project.ext.driverLanguages.each { lang, info ->
                println "Cloning $lang-driver"
                def targetDir = targetGitdir(lang)
                Grgit.clone(dir: targetDir,
                        uri: "https://github.com/neo4j/neo4j-$lang-driver.git",
                        refToCheckout: info['gitref'])
            }
        }
    }
}

def targetGitdir(lang) {
    if (project.hasProperty('localDriverSources')) {
        file("$projectDir/../neo4j-$lang-driver")
    } else {
        file("$buildDir/driver-sources/$lang-driver")
    }
}

def fonts = [
        'Open Sans'  : 'https://www.google.com/fonts/download?kit=3hvsV99qyKCBS55e5pvb3ltkqrIMaAZWyLYEoB48lSQ',
        'Inconsolata': 'https://www.google.com/fonts/download?kit=CNj0Ze1H6w4FVgc32wmZS4fD-WQWLbF4rYwcBGowFYY',
        'Lora'       : 'https://www.google.com/fonts/download?kit=iwrHM7FQEcKgsUvDuXxrPg'
]

task('downloadFonts') {
    description 'Download from Google Fonts.'
    outputs.dir "$buildDir/font-downlods"
    outputs.upToDateWhen {
        file("$buildDir/font-downlods").exists()
    }
    doLast {
        fonts.each { name, url ->
            download {
                src url
                dest "$buildDir/font-downlods/${name}.zip"
                overwrite false
            }
        }
    }
}
downloadFonts.finalizedBy 'unzipDownloadedFonts'

task('unzipDownloadedFonts', dependsOn: 'downloadFonts', type: Copy) {
    description 'Unzip zip files with fonts.'
    fonts.each { name, url ->
        from zipTree("$buildDir/font-downlods/${name}.zip")
    }
    into "$buildDir/fonts"
}

task('cleanOutputs', dependsOn: ['cleanAsciidoctorHtml', 'cleanAsciidoctorPdf']) {
    description 'Clean the HTML and PDF outputs.'
}

project.ext.driverLanguages.each { lang, info ->
    project.ext.commonAsciidoctorAttributes["$lang-driver-version"] = info['version']
    project.ext.commonAsciidoctorAttributes["$lang-root"] = targetGitdir(lang)
    project.ext.htmlAsciidoctorAttributes["include-with-$lang"] = ''
}

def getAsciidoctor() {
    if (project.ext.adoc == null) {
        project.ext.driverLanguages.each { lang, info ->
            AsciidoctorExtensions.extensions {
                block(name: 'include-with-' + lang, contexts: [':open']) {
                    parent, reader, attributes ->
                        if (parent.getDocument().getAttributes().containsKey('include-with-' + lang)) {
                            createBlock(parent, 'open', reader.readLines(), attributes + ['role': 'include-with-' + lang], [:])
                        } else {
                            null
                        }
                }
            }
        }
        project.ext.adoc = Asciidoctor.Factory.create()
    }
    project.ext.adoc
}

def asciidocSourceDir = "${projectDir}/src/main/asciidoc"
def asciidocSourceFile = new File("$asciidocSourceDir/index.adoc")
def pdfThemeDir = "${projectDir}/src/main/pdf-theme"
def htmlOutputDir = "$buildDir/html5"
def pdfOutputDir = "$buildDir/pdf"

task('copyHtmlResources', type: Copy) {
    description 'Copy HTML resources to output.'
    from(asciidocSourceDir) {
        include 'images/**'
    }
    from("${projectDir}/src/main") {
        include 'css/**'
        include 'javascript/**'
        include 'logo/**'
    }
    into htmlOutputDir
}

task('asciidoctorHtml', dependsOn: 'prepareDriverSources') {
    description 'Build Asciidoctor HTML output.'
    inputs.dir asciidocSourceDir
    outputs.dir htmlOutputDir
    doLast {
        def attrs = project.ext.commonAsciidoctorAttributes + project.ext.htmlAsciidoctorAttributes
        def opts = OptionsBuilder.options()
                .backend('html5')
                .safe(SafeMode.UNSAFE)
                .toDir(new File(htmlOutputDir))
                .mkDirs(true)
                .attributes(attrs)
        getAsciidoctor().convertFile(asciidocSourceFile, opts.get())
    }
}
asciidoctorHtml.finalizedBy 'copyHtmlResources'

task('asciidoctorPdf', dependsOn: ['prepareDriverSources', 'unzipDownloadedFonts']) {
    description 'Build Asciidoctor PDF outputs.'
    inputs.dir asciidocSourceDir
    inputs.dir pdfThemeDir
    outputs.dir pdfOutputDir
    doLast {
        project.ext.driverLanguages.each { lang, info ->
            def attrs = project.ext.commonAsciidoctorAttributes + project.ext.pdfAsciidoctorAttributes +
                    [
                            ('include-with-' + lang): true,
                            'manual-title'          : "Neo4j ${info.name} Driver Manual: ${project.ext.projectVersionTitle}"
                    ]
            def opts = OptionsBuilder.options()
                    .backend('pdf')
                    .safe(SafeMode.UNSAFE)
                    .toFile(new File("$pdfOutputDir/neo4j-driver-manual-${lang}-${project.ext.projectVersion}.pdf"))
                    .mkDirs(true)
                    .attributes(attrs)
            getAsciidoctor().convertFile(asciidocSourceFile, opts.get())
        }
    }
}
asciidoctorPdf.onlyIf { !project.hasProperty('noPdf') }

task('dist', dependsOn: ['asciidoctorHtml', 'asciidoctorPdf']) {
    description 'Build HTML and PDF outputs.'
}

