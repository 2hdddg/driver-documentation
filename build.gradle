import org.ajoberstar.grgit.*
import org.asciidoctor.groovydsl.AsciidoctorExtensions
import org.asciidoctor.Asciidoctor
import org.asciidoctor.OptionsBuilder
import org.asciidoctor.SafeMode

defaultTasks 'asciidoctorHtml', 'asciidoctorPdf'

def projectVersion = '1.0'
def driverLanguages = [
        'java'      : [
                'version': '1.0.0-M01',
                'gitref' : '1.0',
                'url'    : 'http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.neo4j.driver%22%20AND%20a%3A%22neo4j-java-driver%22'
        ],
        'javascript': [
                'version': '1.0.0-alpha.3',
                'gitref' : '1.0',
                'url'    : 'https://www.npmjs.com/package/neo4j-driver'
        ],
        'python'    : [
                'version': '1.0.0b1',
                'gitref' : '1.0',
                'url'    : 'https://pypi.python.org/pypi/neo4j-driver'
        ]
]

buildscript {
    ext {
        jrubyVersion = '1.7.23'
        asciidoctorjVersion = '1.5.3.2'
        asciidoctorjPdfVersion = '1.5.0-alpha.10.1'
        asciidoctorGroovyDslVersion = '1.0.0.Alpha1'
        gradleGitVersion = '1.3.2'
    }

    dependencies {
        classpath "org.asciidoctor:asciidoctorj:$asciidoctorjVersion"
        classpath "org.asciidoctor:asciidoctorj-pdf:$asciidoctorjPdfVersion"
        classpath "org.asciidoctor:asciidoctorj-groovy-dsl:$asciidoctorGroovyDslVersion"
        classpath "org.ajoberstar:gradle-git:$gradleGitVersion"
        classpath "org.jruby:jruby-complete:$jrubyVersion"
    }

    repositories {
        jcenter()
    }
}

apply plugin: 'base'

task('gitClone') {
    description 'Clones the driver sources from GitHub.'
    outputs.dir file("$buildDir/driver-sources")
    doLast {
        driverLanguages.each { lang, info ->
            println "Cloning $lang-driver"
            def targetDir = targetGitdir(lang)
            Grgit.clone(dir: targetDir,
                    uri: "https://github.com/neo4j/neo4j-$lang-driver.git",
                    refToCheckout: info['gitref'])
        }
    }
}

def targetGitdir(lang) {
    file("$buildDir/driver-sources/$lang-driver")
}

def commonAsciidoctorAttributes = [
        'project-version'  : projectVersion,
        'icons'            : 'font',
        'imagesdir'        : './images',
        'attribute-missing': 'warn'
]

def htmlAsciidoctorAttributes = [
        'toc'        : 'left',
        'stylesdir'  : 'css/',
        'stylesheet' : 'github.css',
        'sectanchors': true,
        'docinfo1'   : true,
        'linkcss'    : true
]

def pdfAsciidoctorAttributes = [
        'source-highlighter': 'rouge'
]

def adoc = Asciidoctor.Factory.create()

driverLanguages.each { lang, info ->
    commonAsciidoctorAttributes["$lang-driver-version"] = info['version']
    commonAsciidoctorAttributes["$lang-root"] = targetGitdir(lang)
    htmlAsciidoctorAttributes["include-with-$lang"] = true

    AsciidoctorExtensions.extensions {
        block(name: 'include-with-' + lang, contexts: [':open']) {
            parent, reader, attributes ->
                if (parent.getDocument().getAttributes().containsKey('include-with-' + lang)) {
                    createBlock(parent, 'open', reader.readLines(), attributes + ['role': 'include-with-' + lang], [:])
                } else {
                    createBlock(parent, 'skip', [], [:], [:])
                }
        }
    }
}

def asciidocSourceDir = "${projectDir}/src/main/asciidoc"
def asciidocSourceFile = new File("$asciidocSourceDir/index.adoc")
def htmlOutputDir = "$buildDir/html5"
def pdfOutputDir = "$buildDir/pdf"

task('copyHtmlResources', type: Copy) {
    description 'Copy HTML resources to output.'
    from(asciidocSourceDir) {
        include 'images/**'
    }
    from("${projectDir}/src/main") {
        include 'css/**'
        include 'javascript/**'
    }
    into htmlOutputDir
}

task('asciidoctorHtml') {
    description 'Build Asciidoctor HTML output.'
    inputs.dir asciidocSourceDir
    outputs.dir htmlOutputDir
    doLast {
        def attrs = commonAsciidoctorAttributes + htmlAsciidoctorAttributes
        def opts = OptionsBuilder.options()
                .backend('html5')
                .safe(SafeMode.UNSAFE)
                .toDir(new File(htmlOutputDir))
                .mkDirs(true)
                .attributes(attrs)
        adoc.convertFile(asciidocSourceFile, opts.get())
    }
}
asciidoctorHtml.dependsOn 'gitClone'
asciidoctorHtml.finalizedBy 'copyHtmlResources'

task('asciidoctorPdf') {
    description 'Build Asciidoctor PDF outputs.'
    inputs.dir asciidocSourceDir
    outputs.dir pdfOutputDir
    doLast {
        driverLanguages.each { lang, info ->
            def attrs = commonAsciidoctorAttributes + pdfAsciidoctorAttributes + [('include-with-' + lang): true]
            def opts = OptionsBuilder.options()
                    .backend('pdf')
                    .safe(SafeMode.UNSAFE)
                    .toFile(new File("$pdfOutputDir/neo4j-driver-manual-${lang}.pdf"))
                    .mkDirs(true)
                    .attributes(attrs)
            adoc.convertFile(asciidocSourceFile, opts.get())
        }
    }
}
asciidoctorPdf.onlyIf { project.hasProperty('pdf') }
asciidoctorPdf.dependsOn 'gitClone'

task buildScriptDependencies(type: org.gradle.api.tasks.diagnostics.DependencyReportTask) {
    description 'Print the build script dependencies.'
    configurations = project.buildscript.configurations
}

